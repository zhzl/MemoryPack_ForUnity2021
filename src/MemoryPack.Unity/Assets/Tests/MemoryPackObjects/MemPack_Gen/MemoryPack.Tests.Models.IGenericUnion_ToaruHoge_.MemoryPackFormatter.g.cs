
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {


partial interface IGenericUnion<ToaruHoge> : IMemoryPackFormatterRegister
{
    static partial void StaticConstructor();

    static IGenericUnion()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<IGenericUnion<ToaruHoge>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new IGenericUnionFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<IGenericUnion<ToaruHoge>[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<IGenericUnion<ToaruHoge>>());
        }
    }

    [global::MemoryPack.Internal.Preserve]
    sealed class IGenericUnionFormatter : MemoryPackFormatter<IGenericUnion<ToaruHoge>>
    {
        static readonly System.Collections.Generic.Dictionary<Type, ushort> __typeToTag = new(2)
        {
            { typeof(global::MemoryPack.Tests.Models.GenricUnionA<ToaruHoge>), 0 },
            { typeof(global::MemoryPack.Tests.Models.GenricUnionB<ToaruHoge>), 1 },
        };

        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref IGenericUnion<ToaruHoge>? value)
        {

            if (value == null)
            {
                writer.WriteNullUnionHeader();

                return;
            }

            if (__typeToTag.TryGetValue(value.GetType(), out var tag))
            {
                writer.WriteUnionHeader(tag);

                switch (tag)
                {
                    case 0: writer.WritePackable(System.Runtime.CompilerServices.Unsafe.As<global::MemoryPack.Tests.Models.IGenericUnion<ToaruHoge>?, global::MemoryPack.Tests.Models.GenricUnionA<ToaruHoge>>(ref value)); break;
                    case 1: writer.WritePackable(System.Runtime.CompilerServices.Unsafe.As<global::MemoryPack.Tests.Models.IGenericUnion<ToaruHoge>?, global::MemoryPack.Tests.Models.GenricUnionB<ToaruHoge>>(ref value)); break;
                    default:
                        break;
                }
            }
            else
            {
                MemoryPackSerializationException.ThrowNotFoundInUnionType(value.GetType(), typeof(global::MemoryPack.Tests.Models.IGenericUnion<ToaruHoge>));
            }

        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref IGenericUnion<ToaruHoge>? value)
        {

            if (!reader.TryReadUnionHeader(out var tag))
            {
                value = default;

                return;
            }

            switch (tag)
            {
                case 0:
                    if (value is global::MemoryPack.Tests.Models.GenricUnionA<ToaruHoge>)
                    {
                        reader.ReadPackable(ref System.Runtime.CompilerServices.Unsafe.As<global::MemoryPack.Tests.Models.IGenericUnion<ToaruHoge>?, global::MemoryPack.Tests.Models.GenricUnionA<ToaruHoge>>(ref value));
                    }
                    else
                    {
                        value = (global::MemoryPack.Tests.Models.GenricUnionA<ToaruHoge>)reader.ReadPackable<global::MemoryPack.Tests.Models.GenricUnionA<ToaruHoge>>();
                    }
                    break;
                case 1:
                    if (value is global::MemoryPack.Tests.Models.GenricUnionB<ToaruHoge>)
                    {
                        reader.ReadPackable(ref System.Runtime.CompilerServices.Unsafe.As<global::MemoryPack.Tests.Models.IGenericUnion<ToaruHoge>?, global::MemoryPack.Tests.Models.GenricUnionB<ToaruHoge>>(ref value));
                    }
                    else
                    {
                        value = (global::MemoryPack.Tests.Models.GenricUnionB<ToaruHoge>)reader.ReadPackable<global::MemoryPack.Tests.Models.GenricUnionB<ToaruHoge>>();
                    }
                    break;
                default:
                    MemoryPackSerializationException.ThrowInvalidTag(tag, typeof(global::MemoryPack.Tests.Models.IGenericUnion<ToaruHoge>));
                    break;
            }

        }
    }
}
}
