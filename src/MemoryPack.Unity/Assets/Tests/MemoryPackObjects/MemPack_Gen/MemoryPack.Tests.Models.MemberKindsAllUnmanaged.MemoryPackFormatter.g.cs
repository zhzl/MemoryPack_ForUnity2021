
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>int</b> A<br/>
/// <b>int</b> B<br/>
/// <b>int</b> C<br/>
/// <b>int</b> D<br/>
/// <b>int</b> E<br/>
/// <b>int</b> F<br/>
/// <b>int</b> G<br/>
/// <b>int</b> H<br/>
/// <b>int</b> I1<br/>
/// <b>int</b> J1<br/>
/// <b>int</b> K<br/>
/// </code>
/// </remarks>
partial class MemberKindsAllUnmanaged : IMemoryPackable<MemberKindsAllUnmanaged>
{

    static partial void StaticConstructor();

    static MemberKindsAllUnmanaged()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<MemberKindsAllUnmanaged>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new MemberKindsAllUnmanagedFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<MemberKindsAllUnmanaged[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<MemberKindsAllUnmanaged>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref MemberKindsAllUnmanaged? value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteUnmanagedWithObjectHeader(11, value.@A, value.@B, value.@C, value.@D, value.@E, value.@F, value.@G, value.@H, value.@I1, value.@J1, value.@K);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref MemberKindsAllUnmanaged? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        int __A;
        int __B;
        int __C;
        int __D;
        int __E;
        int __F;
        int __G;
        int __H;
        int __I1;
        int __J1;
        int __K;

        
        if (count == 11)
        {
            if (value == null)
            {
                reader.ReadUnmanaged(out __A, out __B, out __C, out __D, out __E, out __F, out __G, out __H, out __I1, out __J1, out __K);


                goto NEW;
            }
            else
            {
                __A = value.@A;
                __B = value.@B;
                __C = value.@C;
                __D = value.@D;
                __E = value.@E;
                __F = value.@F;
                __G = value.@G;
                __H = value.@H;
                __I1 = value.@I1;
                __J1 = value.@J1;
                __K = value.@K;

                reader.ReadUnmanaged(out __A);
                reader.ReadUnmanaged(out __B);
                reader.ReadUnmanaged(out __C);
                reader.ReadUnmanaged(out __D);
                reader.ReadUnmanaged(out __E);
                reader.ReadUnmanaged(out __F);
                reader.ReadUnmanaged(out __G);
                reader.ReadUnmanaged(out __H);
                reader.ReadUnmanaged(out __I1);
                reader.ReadUnmanaged(out __J1);
                reader.ReadUnmanaged(out __K);

                goto SET;
            }

        }
        else if (count > 11)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(MemberKindsAllUnmanaged), 11, count);
            goto READ_END;
        }
        else
        {
            if (value == null)
            {
               __A = default!;
               __B = default!;
               __C = default!;
               __D = default!;
               __E = default!;
               __F = default!;
               __G = default!;
               __H = default!;
               __I1 = default!;
               __J1 = default!;
               __K = default!;
            }
            else
            {
               __A = value.@A;
               __B = value.@B;
               __C = value.@C;
               __D = value.@D;
               __E = value.@E;
               __F = value.@F;
               __G = value.@G;
               __H = value.@H;
               __I1 = value.@I1;
               __J1 = value.@J1;
               __K = value.@K;
            }


            if (count == 0) goto SKIP_READ;
            reader.ReadUnmanaged(out __A); if (count == 1) goto SKIP_READ;
            reader.ReadUnmanaged(out __B); if (count == 2) goto SKIP_READ;
            reader.ReadUnmanaged(out __C); if (count == 3) goto SKIP_READ;
            reader.ReadUnmanaged(out __D); if (count == 4) goto SKIP_READ;
            reader.ReadUnmanaged(out __E); if (count == 5) goto SKIP_READ;
            reader.ReadUnmanaged(out __F); if (count == 6) goto SKIP_READ;
            reader.ReadUnmanaged(out __G); if (count == 7) goto SKIP_READ;
            reader.ReadUnmanaged(out __H); if (count == 8) goto SKIP_READ;
            reader.ReadUnmanaged(out __I1); if (count == 9) goto SKIP_READ;
            reader.ReadUnmanaged(out __J1); if (count == 10) goto SKIP_READ;
            reader.ReadUnmanaged(out __K); if (count == 11) goto SKIP_READ;

    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        goto NEW;
        // value.@A = __A;
        // value.@B = __B;
        // value.@E = __E;
        // value.@F = __F;
        // value.@G = __G;
        // value.@H = __H;
        goto READ_END;

    NEW:
        value = new MemberKindsAllUnmanaged(__C, __D)
        {
            @A = __A,
            @B = __B,
            @E = __E,
            @F = __F,
            @G = __G,
            @H = __H
        };

    READ_END:

    END:

        return;
    }
}
partial class MemberKindsAllUnmanaged
{
    [global::MemoryPack.Internal.Preserve]
    sealed class MemberKindsAllUnmanagedFormatter : MemoryPackFormatter<MemberKindsAllUnmanaged>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref MemberKindsAllUnmanaged value)
        {
            MemberKindsAllUnmanaged.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref MemberKindsAllUnmanaged value)
        {
            MemberKindsAllUnmanaged.Deserialize(ref reader, ref value);
        }
    }
}
}
