
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>int</b> MyProperty<br/>
/// <b>MemoryPack.Tests.Models.Recursive</b> Rec<br/>
/// </code>
/// </remarks>
partial class Recursive : IMemoryPackable<Recursive>
{

    static partial void StaticConstructor();

    static Recursive()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<Recursive>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new RecursiveFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<Recursive[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<Recursive>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref Recursive? value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteUnmanagedWithObjectHeader(2, value.@MyProperty);
        writer.WritePackable(value.@Rec);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref Recursive? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        int __MyProperty;
        global::MemoryPack.Tests.Models.Recursive __Rec;

        
        if (count == 2)
        {
            if (value == null)
            {
                reader.ReadUnmanaged(out __MyProperty);
                __Rec = reader.ReadPackable<global::MemoryPack.Tests.Models.Recursive>();


                goto NEW;
            }
            else
            {
                __MyProperty = value.@MyProperty;
                __Rec = value.@Rec;

                reader.ReadUnmanaged(out __MyProperty);
                reader.ReadPackable(ref __Rec);

                goto SET;
            }

        }
        else if (count > 2)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(Recursive), 2, count);
            goto READ_END;
        }
        else
        {
            if (value == null)
            {
               __MyProperty = default!;
               __Rec = default!;
            }
            else
            {
               __MyProperty = value.@MyProperty;
               __Rec = value.@Rec;
            }


            if (count == 0) goto SKIP_READ;
            reader.ReadUnmanaged(out __MyProperty); if (count == 1) goto SKIP_READ;
            reader.ReadPackable(ref __Rec); if (count == 2) goto SKIP_READ;

    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        
        value.@MyProperty = __MyProperty;
        value.@Rec = __Rec;
        goto READ_END;

    NEW:
        value = new Recursive()
        {
            @MyProperty = __MyProperty,
            @Rec = __Rec
        };

    READ_END:

    END:

        return;
    }
}
partial class Recursive
{
    [global::MemoryPack.Internal.Preserve]
    sealed class RecursiveFormatter : MemoryPackFormatter<Recursive>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref Recursive value)
        {
            Recursive.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref Recursive value)
        {
            Recursive.Deserialize(ref reader, ref value);
        }
    }
}
}
