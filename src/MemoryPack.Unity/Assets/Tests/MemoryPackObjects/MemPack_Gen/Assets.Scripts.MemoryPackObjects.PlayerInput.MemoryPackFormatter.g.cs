
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace Assets.Scripts.MemoryPackObjects {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>Assets.Scripts.MemoryPackObjects.float2</b> move<br/>
/// <b>Assets.Scripts.MemoryPackObjects.quaternion</b> target<br/>
/// <b>System.Collections.Generic.List&lt;Assets.Scripts.MemoryPackObjects.KeyRecord&gt;</b> keyRecords<br/>
/// </code>
/// </remarks>
partial class PlayerInput : IMemoryPackable<PlayerInput>
{

    static partial void StaticConstructor();

    static PlayerInput()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<PlayerInput>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new PlayerInputFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<PlayerInput[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<PlayerInput>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.List<global::Assets.Scripts.MemoryPackObjects.KeyRecord>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ListFormatter<global::Assets.Scripts.MemoryPackObjects.KeyRecord>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref PlayerInput? value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteUnmanagedWithObjectHeader(3, value.@move, value.@target);
        global::MemoryPack.Formatters.ListFormatter.SerializePackable(ref writer, value.@keyRecords);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref PlayerInput? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        global::Assets.Scripts.MemoryPackObjects.float2 __move;
        global::Assets.Scripts.MemoryPackObjects.quaternion __target;
        global::System.Collections.Generic.List<global::Assets.Scripts.MemoryPackObjects.KeyRecord> __keyRecords;

        
        if (count == 3)
        {
            if (value == null)
            {
                reader.ReadUnmanaged(out __move, out __target);
                __keyRecords = global::MemoryPack.Formatters.ListFormatter.DeserializePackable<global::Assets.Scripts.MemoryPackObjects.KeyRecord>(ref reader);


                goto NEW;
            }
            else
            {
                __move = value.@move;
                __target = value.@target;
                __keyRecords = value.@keyRecords;

                reader.ReadUnmanaged(out __move);
                reader.ReadUnmanaged(out __target);
                global::MemoryPack.Formatters.ListFormatter.DeserializePackable(ref reader, ref __keyRecords);

                goto SET;
            }

        }
        else if (count > 3)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(PlayerInput), 3, count);
            goto READ_END;
        }
        else
        {
            if (value == null)
            {
               __move = default!;
               __target = default!;
               __keyRecords = default!;
            }
            else
            {
               __move = value.@move;
               __target = value.@target;
               __keyRecords = value.@keyRecords;
            }


            if (count == 0) goto SKIP_READ;
            reader.ReadUnmanaged(out __move); if (count == 1) goto SKIP_READ;
            reader.ReadUnmanaged(out __target); if (count == 2) goto SKIP_READ;
            global::MemoryPack.Formatters.ListFormatter.DeserializePackable(ref reader, ref __keyRecords); if (count == 3) goto SKIP_READ;

    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        
        value.@move = __move;
        value.@target = __target;
        value.@keyRecords = __keyRecords;
        goto READ_END;

    NEW:
        value = new PlayerInput()
        {
            @move = __move,
            @target = __target,
            @keyRecords = __keyRecords
        };

    READ_END:

    END:

        return;
    }
}
partial class PlayerInput
{
    [global::MemoryPack.Internal.Preserve]
    sealed class PlayerInputFormatter : MemoryPackFormatter<PlayerInput>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref PlayerInput value)
        {
            PlayerInput.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref PlayerInput value)
        {
            PlayerInput.Deserialize(ref reader, ref value);
        }
    }
}
}
