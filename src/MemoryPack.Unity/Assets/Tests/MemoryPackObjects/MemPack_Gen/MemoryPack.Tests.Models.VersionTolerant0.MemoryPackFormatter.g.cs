
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {

/// <remarks>
/// MemoryPack GenerateType: VersionTolerant<br/>
/// <code>
/// </code>
/// </remarks>
partial class VersionTolerant0 : IMemoryPackable<VersionTolerant0>
{

    static partial void StaticConstructor();

    static VersionTolerant0()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<VersionTolerant0>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new VersionTolerant0Formatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<VersionTolerant0[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<VersionTolerant0>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref VersionTolerant0? value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteObjectHeader(0);

        

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref VersionTolerant0? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }

        Span<int> deltas = stackalloc int[count];
        for (int i = 0; i < count; i++)
        {
            deltas[i] = reader.ReadVarIntInt32();
        }



        var readCount = 0;
        if (count == 0)
        {
            if (value == null)
            {


                goto NEW;
            }
            else
            {




                goto SET;
            }

        }
        // else if (count > 0)
        // {
            // MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(VersionTolerant0), 0, count);
            // goto READ_END;
        // }
        else
        {
            if (value == null)
            {

            }
            else
            {

            }


            if (count == 0) goto SKIP_READ;


    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        

        goto READ_END;

    NEW:
        value = new VersionTolerant0()
        {

        };

    READ_END:
        if (count == readCount) goto END;

        for (int i = readCount; i < count; i++)
        {
            reader.Advance(deltas[i]);
        }
    END:

        return;
    }
}
partial class VersionTolerant0
{
    [global::MemoryPack.Internal.Preserve]
    sealed class VersionTolerant0Formatter : MemoryPackFormatter<VersionTolerant0>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref VersionTolerant0 value)
        {
            VersionTolerant0.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref VersionTolerant0 value)
        {
            VersionTolerant0.Deserialize(ref reader, ref value);
        }
    }
}
}
