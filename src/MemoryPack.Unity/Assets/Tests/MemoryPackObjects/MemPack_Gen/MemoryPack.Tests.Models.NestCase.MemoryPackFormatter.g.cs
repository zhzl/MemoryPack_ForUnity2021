
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>MemoryPack.Tests.Models.Inner</b> A<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> B<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> C<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> D<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> E<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> F<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> G<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> H<br/>
/// <b>MemoryPack.Tests.Models.Inner</b> I<br/>
/// </code>
/// </remarks>
partial class NestCase : IMemoryPackable<NestCase>
{

    static partial void StaticConstructor();

    static NestCase()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<NestCase>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new NestCaseFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<NestCase[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<NestCase>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref NestCase? value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteObjectHeader(9);
        writer.WritePackable(value.@A);
        writer.WritePackable(value.@B);
        writer.WritePackable(value.@C);
        writer.WritePackable(value.@D);
        writer.WritePackable(value.@E);
        writer.WritePackable(value.@F);
        writer.WritePackable(value.@G);
        writer.WritePackable(value.@H);
        writer.WritePackable(value.@I);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref NestCase? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        global::MemoryPack.Tests.Models.Inner __A;
        global::MemoryPack.Tests.Models.Inner __B;
        global::MemoryPack.Tests.Models.Inner __C;
        global::MemoryPack.Tests.Models.Inner __D;
        global::MemoryPack.Tests.Models.Inner __E;
        global::MemoryPack.Tests.Models.Inner __F;
        global::MemoryPack.Tests.Models.Inner __G;
        global::MemoryPack.Tests.Models.Inner __H;
        global::MemoryPack.Tests.Models.Inner __I;

        
        if (count == 9)
        {
            if (value == null)
            {
                __A = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __B = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __C = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __D = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __E = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __F = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __G = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __H = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();
                __I = reader.ReadPackable<global::MemoryPack.Tests.Models.Inner>();


                goto NEW;
            }
            else
            {
                __A = value.@A;
                __B = value.@B;
                __C = value.@C;
                __D = value.@D;
                __E = value.@E;
                __F = value.@F;
                __G = value.@G;
                __H = value.@H;
                __I = value.@I;

                reader.ReadPackable(ref __A);
                reader.ReadPackable(ref __B);
                reader.ReadPackable(ref __C);
                reader.ReadPackable(ref __D);
                reader.ReadPackable(ref __E);
                reader.ReadPackable(ref __F);
                reader.ReadPackable(ref __G);
                reader.ReadPackable(ref __H);
                reader.ReadPackable(ref __I);

                goto SET;
            }

        }
        else if (count > 9)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(NestCase), 9, count);
            goto READ_END;
        }
        else
        {
            if (value == null)
            {
               __A = default!;
               __B = default!;
               __C = default!;
               __D = default!;
               __E = default!;
               __F = default!;
               __G = default!;
               __H = default!;
               __I = default!;
            }
            else
            {
               __A = value.@A;
               __B = value.@B;
               __C = value.@C;
               __D = value.@D;
               __E = value.@E;
               __F = value.@F;
               __G = value.@G;
               __H = value.@H;
               __I = value.@I;
            }


            if (count == 0) goto SKIP_READ;
            reader.ReadPackable(ref __A); if (count == 1) goto SKIP_READ;
            reader.ReadPackable(ref __B); if (count == 2) goto SKIP_READ;
            reader.ReadPackable(ref __C); if (count == 3) goto SKIP_READ;
            reader.ReadPackable(ref __D); if (count == 4) goto SKIP_READ;
            reader.ReadPackable(ref __E); if (count == 5) goto SKIP_READ;
            reader.ReadPackable(ref __F); if (count == 6) goto SKIP_READ;
            reader.ReadPackable(ref __G); if (count == 7) goto SKIP_READ;
            reader.ReadPackable(ref __H); if (count == 8) goto SKIP_READ;
            reader.ReadPackable(ref __I); if (count == 9) goto SKIP_READ;

    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        
        value.@A = __A;
        value.@B = __B;
        value.@C = __C;
        value.@D = __D;
        value.@E = __E;
        value.@F = __F;
        value.@G = __G;
        value.@H = __H;
        value.@I = __I;
        goto READ_END;

    NEW:
        value = new NestCase()
        {
            @A = __A,
            @B = __B,
            @C = __C,
            @D = __D,
            @E = __E,
            @F = __F,
            @G = __G,
            @H = __H,
            @I = __I
        };

    READ_END:

    END:

        return;
    }
}
partial class NestCase
{
    [global::MemoryPack.Internal.Preserve]
    sealed class NestCaseFormatter : MemoryPackFormatter<NestCase>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref NestCase value)
        {
            NestCase.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref NestCase value)
        {
            NestCase.Deserialize(ref reader, ref value);
        }
    }
}
}
