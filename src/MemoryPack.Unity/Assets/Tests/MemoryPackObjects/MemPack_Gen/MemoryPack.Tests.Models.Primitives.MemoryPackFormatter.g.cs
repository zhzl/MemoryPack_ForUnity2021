
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>short</b> Short<br/>
/// <b>int</b> Int<br/>
/// <b>long</b> Long<br/>
/// <b>byte</b> Byte<br/>
/// <b>bool</b> Bool<br/>
/// <b>char</b> Char<br/>
/// <b>float</b> Float<br/>
/// <b>double</b> Double<br/>
/// <b>string</b> String<br/>
/// </code>
/// </remarks>
partial class Primitives : IMemoryPackable<Primitives>
{

    static partial void StaticConstructor();

    static Primitives()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<Primitives>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new PrimitivesFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<Primitives[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<Primitives>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref Primitives? value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteUnmanagedWithObjectHeader(9, value.@Short, value.@Int, value.@Long, value.@Byte, value.@Bool, value.@Char, value.@Float, value.@Double);
        writer.WriteString(value.@String);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref Primitives? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        short __Short;
        int __Int;
        long __Long;
        byte __Byte;
        bool __Bool;
        char __Char;
        float __Float;
        double __Double;
        string __String;

        
        if (count == 9)
        {
            if (value == null)
            {
                reader.ReadUnmanaged(out __Short, out __Int, out __Long, out __Byte, out __Bool, out __Char, out __Float, out __Double);
                __String = reader.ReadString();


                goto NEW;
            }
            else
            {
                __Short = value.@Short;
                __Int = value.@Int;
                __Long = value.@Long;
                __Byte = value.@Byte;
                __Bool = value.@Bool;
                __Char = value.@Char;
                __Float = value.@Float;
                __Double = value.@Double;
                __String = value.@String;

                reader.ReadUnmanaged(out __Short);
                reader.ReadUnmanaged(out __Int);
                reader.ReadUnmanaged(out __Long);
                reader.ReadUnmanaged(out __Byte);
                reader.ReadUnmanaged(out __Bool);
                reader.ReadUnmanaged(out __Char);
                reader.ReadUnmanaged(out __Float);
                reader.ReadUnmanaged(out __Double);
                __String = reader.ReadString();

                goto SET;
            }

        }
        else if (count > 9)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(Primitives), 9, count);
            goto READ_END;
        }
        else
        {
            if (value == null)
            {
               __Short = default!;
               __Int = default!;
               __Long = default!;
               __Byte = default!;
               __Bool = default!;
               __Char = default!;
               __Float = default!;
               __Double = default!;
               __String = default!;
            }
            else
            {
               __Short = value.@Short;
               __Int = value.@Int;
               __Long = value.@Long;
               __Byte = value.@Byte;
               __Bool = value.@Bool;
               __Char = value.@Char;
               __Float = value.@Float;
               __Double = value.@Double;
               __String = value.@String;
            }


            if (count == 0) goto SKIP_READ;
            reader.ReadUnmanaged(out __Short); if (count == 1) goto SKIP_READ;
            reader.ReadUnmanaged(out __Int); if (count == 2) goto SKIP_READ;
            reader.ReadUnmanaged(out __Long); if (count == 3) goto SKIP_READ;
            reader.ReadUnmanaged(out __Byte); if (count == 4) goto SKIP_READ;
            reader.ReadUnmanaged(out __Bool); if (count == 5) goto SKIP_READ;
            reader.ReadUnmanaged(out __Char); if (count == 6) goto SKIP_READ;
            reader.ReadUnmanaged(out __Float); if (count == 7) goto SKIP_READ;
            reader.ReadUnmanaged(out __Double); if (count == 8) goto SKIP_READ;
            __String = reader.ReadString(); if (count == 9) goto SKIP_READ;

    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        
        value.@Short = __Short;
        value.@Int = __Int;
        value.@Long = __Long;
        value.@Byte = __Byte;
        value.@Bool = __Bool;
        value.@Char = __Char;
        value.@Float = __Float;
        value.@Double = __Double;
        value.@String = __String;
        goto READ_END;

    NEW:
        value = new Primitives()
        {
            @Short = __Short,
            @Int = __Int,
            @Long = __Long,
            @Byte = __Byte,
            @Bool = __Bool,
            @Char = __Char,
            @Float = __Float,
            @Double = __Double,
            @String = __String
        };

    READ_END:

    END:

        return;
    }
}
partial class Primitives
{
    [global::MemoryPack.Internal.Preserve]
    sealed class PrimitivesFormatter : MemoryPackFormatter<Primitives>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref Primitives value)
        {
            Primitives.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref Primitives value)
        {
            Primitives.Deserialize(ref reader, ref value);
        }
    }
}
}
