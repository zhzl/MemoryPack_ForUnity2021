
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>System.Numerics.BigInteger</b> P1<br/>
/// <b>System.Version</b> P2<br/>
/// <b>System.Uri</b> P3<br/>
/// <b>System.TimeZoneInfo</b> P4<br/>
/// <b>System.Collections.BitArray</b> P5<br/>
/// <b>System.Text.StringBuilder</b> P6<br/>
/// <b>System.Type</b> P7<br/>
/// <b>int[,]</b> P8<br/>
/// <b>int[,,]</b> P9<br/>
/// <b>int[,,,]</b> P10<br/>
/// <b>System.Collections.Generic.KeyValuePair&lt;int, int&gt;</b> P11<br/>
/// <b>System.Lazy&lt;int&gt;</b> P12<br/>
/// <b>int?</b> P13<br/>
/// <b>System.ArraySegment&lt;int&gt;</b> P14<br/>
/// <b>System.Memory&lt;int&gt;</b> P15<br/>
/// <b>System.ReadOnlyMemory&lt;int&gt;</b> P16<br/>
/// <b>System.Buffers.ReadOnlySequence&lt;int&gt;</b> P17<br/>
/// <b>System.Collections.Generic.List&lt;int&gt;</b> P18<br/>
/// <b>System.Collections.Generic.Stack&lt;int&gt;</b> P19<br/>
/// <b>System.Collections.Generic.Queue&lt;int&gt;</b> P20<br/>
/// <b>System.Collections.Generic.LinkedList&lt;int&gt;</b> P21<br/>
/// <b>System.Collections.Generic.HashSet&lt;int&gt;</b> P22<br/>
/// <b>System.Collections.ObjectModel.ObservableCollection&lt;int&gt;</b> P24<br/>
/// <b>System.Collections.ObjectModel.Collection&lt;int&gt;</b> P25<br/>
/// <b>System.Collections.Concurrent.ConcurrentQueue&lt;int&gt;</b> P26<br/>
/// <b>System.Collections.Concurrent.ConcurrentStack&lt;int&gt;</b> P27<br/>
/// <b>System.Collections.Concurrent.ConcurrentBag&lt;int&gt;</b> P28<br/>
/// <b>System.Collections.Generic.Dictionary&lt;int, int&gt;</b> P29<br/>
/// <b>System.Collections.Generic.SortedDictionary&lt;int, int&gt;</b> P30<br/>
/// <b>System.Collections.Generic.SortedList&lt;int, int&gt;</b> P31<br/>
/// <b>System.Collections.Concurrent.ConcurrentDictionary&lt;int, int&gt;</b> P32<br/>
/// <b>System.Collections.ObjectModel.ReadOnlyCollection&lt;int&gt;</b> P33<br/>
/// <b>System.Collections.ObjectModel.ReadOnlyObservableCollection&lt;int&gt;</b> P34<br/>
/// <b>System.Collections.Concurrent.BlockingCollection&lt;int&gt;</b> P35<br/>
/// <b>System.Collections.Generic.IEnumerable&lt;int&gt;</b> P49<br/>
/// <b>System.Collections.Generic.ICollection&lt;int&gt;</b> P50<br/>
/// <b>System.Collections.Generic.IReadOnlyCollection&lt;int&gt;</b> P51<br/>
/// <b>System.Collections.Generic.IList&lt;int&gt;</b> P52<br/>
/// <b>System.Collections.Generic.IReadOnlyList&lt;int&gt;</b> P53<br/>
/// <b>System.Collections.Generic.IDictionary&lt;int, int&gt;</b> P54<br/>
/// <b>System.Collections.Generic.IReadOnlyDictionary&lt;int, int&gt;</b> P55<br/>
/// <b>System.Linq.ILookup&lt;int, int&gt;</b> P56<br/>
/// <b>System.Linq.IGrouping&lt;int, int&gt;</b> P57<br/>
/// <b>System.Collections.Generic.ISet&lt;int&gt;</b> P58<br/>
/// <b>System.Tuple&lt;int, string, int&gt;</b> T3<br/>
/// <b>(int, string, int)</b> VT3<br/>
/// <b>MemoryPack.Tests.Models.MyStruct?</b> N1<br/>
/// <b>System.Collections.Generic.KeyValuePair&lt;string, string&gt;</b> N2<br/>
/// <b>MemoryPack.Tests.Models.IUnionType</b> U1<br/>
/// </code>
/// </remarks>
partial class HogeHoge : IMemoryPackable<HogeHoge>
{

    static partial void StaticConstructor();

    static HogeHoge()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<HogeHoge>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new HogeHogeFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<HogeHoge[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<HogeHoge>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<int[,]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.TwoDimensionalArrayFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<int[,,]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ThreeDimensionalArrayFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<int[,,,]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.FourDimensionalArrayFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.KeyValuePair<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.KeyValuePairFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Lazy<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.LazyFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<int?>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.NullableFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.ArraySegment<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArraySegmentFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Memory<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.MemoryFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.ReadOnlyMemory<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ReadOnlyMemoryFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Buffers.ReadOnlySequence<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ReadOnlySequenceFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.List<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ListFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.Stack<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.StackFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.Queue<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.QueueFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.LinkedList<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.LinkedListFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.HashSet<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.HashSetFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.ObjectModel.ObservableCollection<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ObservableCollectionFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.ObjectModel.Collection<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.CollectionFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Concurrent.ConcurrentQueue<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ConcurrentQueueFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Concurrent.ConcurrentStack<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ConcurrentStackFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Concurrent.ConcurrentBag<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ConcurrentBagFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.Dictionary<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.DictionaryFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.SortedDictionary<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.SortedDictionaryFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.SortedList<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.SortedListFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Concurrent.ConcurrentDictionary<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ConcurrentDictionaryFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.ObjectModel.ReadOnlyCollection<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ReadOnlyCollectionFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.ObjectModel.ReadOnlyObservableCollection<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ReadOnlyObservableCollectionFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Concurrent.BlockingCollection<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.BlockingCollectionFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.IEnumerable<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceEnumerableFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.ICollection<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceCollectionFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.IReadOnlyCollection<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceReadOnlyCollectionFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.IList<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceListFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.IReadOnlyList<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceReadOnlyListFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.IDictionary<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceDictionaryFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.IReadOnlyDictionary<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceReadOnlyDictionaryFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Linq.ILookup<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceLookupFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Linq.IGrouping<int, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceGroupingFormatter<int, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.ISet<int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.InterfaceSetFormatter<int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Tuple<int, string, int>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.TupleFormatter<int, string, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<(int, string, int)>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ValueTupleFormatter<int, string, int>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::MemoryPack.Tests.Models.MyStruct?>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.NullableFormatter<global::MemoryPack.Tests.Models.MyStruct>());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<global::System.Collections.Generic.KeyValuePair<string, string>>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.KeyValuePairFormatter<string, string>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref HogeHoge? value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {

        if (value == null)
        {
            writer.WriteNullObjectHeader();
            goto END;
        }

        writer.WriteObjectHeader(49);
        writer.WriteValue(value.@P1);
        writer.WriteValue(value.@P2);
        writer.WriteValue(value.@P3);
        writer.WriteValue(value.@P4);
        writer.WriteValue(value.@P5);
        writer.WriteValue(value.@P6);
        writer.WriteValue(value.@P7);
        writer.WriteValue(value.@P8);
        writer.WriteValue(value.@P9);
        writer.WriteValue(value.@P10);
        writer.WriteUnmanaged(value.@P11);
        writer.WriteValue(value.@P12);
        writer.DangerousWriteUnmanaged(value.@P13);
        writer.WriteValue(value.@P14);
        writer.WriteValue(value.@P15);
        writer.WriteValue(value.@P16);
        writer.WriteValue(value.@P17);
        writer.WriteValue(value.@P18);
        writer.WriteValue(value.@P19);
        writer.WriteValue(value.@P20);
        writer.WriteValue(value.@P21);
        writer.WriteValue(value.@P22);
        writer.WriteValue(value.@P24);
        writer.WriteValue(value.@P25);
        writer.WriteValue(value.@P26);
        writer.WriteValue(value.@P27);
        writer.WriteValue(value.@P28);
        writer.WriteValue(value.@P29);
        writer.WriteValue(value.@P30);
        writer.WriteValue(value.@P31);
        writer.WriteValue(value.@P32);
        writer.WriteValue(value.@P33);
        writer.WriteValue(value.@P34);
        writer.WriteValue(value.@P35);
        writer.WriteValue(value.@P49);
        writer.WriteValue(value.@P50);
        writer.WriteValue(value.@P51);
        writer.WriteValue(value.@P52);
        writer.WriteValue(value.@P53);
        writer.WriteValue(value.@P54);
        writer.WriteValue(value.@P55);
        writer.WriteValue(value.@P56);
        writer.WriteValue(value.@P57);
        writer.WriteValue(value.@P58);
        writer.WriteValue(value.@T3);
        writer.WriteValue(value.@VT3);
        writer.WriteValue(value.@N1);
        writer.WriteValue(value.@N2);
        writer.WriteValue(value.@U1);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref HogeHoge? value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        global::System.Numerics.BigInteger __P1;
        global::System.Version __P2;
        global::System.Uri __P3;
        global::System.TimeZoneInfo __P4;
        global::System.Collections.BitArray __P5;
        global::System.Text.StringBuilder __P6;
        global::System.Type __P7;
        int[,] __P8;
        int[,,] __P9;
        int[,,,] __P10;
        global::System.Collections.Generic.KeyValuePair<int, int> __P11;
        global::System.Lazy<int> __P12;
        int? __P13;
        global::System.ArraySegment<int> __P14;
        global::System.Memory<int> __P15;
        global::System.ReadOnlyMemory<int> __P16;
        global::System.Buffers.ReadOnlySequence<int> __P17;
        global::System.Collections.Generic.List<int> __P18;
        global::System.Collections.Generic.Stack<int> __P19;
        global::System.Collections.Generic.Queue<int> __P20;
        global::System.Collections.Generic.LinkedList<int> __P21;
        global::System.Collections.Generic.HashSet<int> __P22;
        global::System.Collections.ObjectModel.ObservableCollection<int> __P24;
        global::System.Collections.ObjectModel.Collection<int> __P25;
        global::System.Collections.Concurrent.ConcurrentQueue<int> __P26;
        global::System.Collections.Concurrent.ConcurrentStack<int> __P27;
        global::System.Collections.Concurrent.ConcurrentBag<int> __P28;
        global::System.Collections.Generic.Dictionary<int, int> __P29;
        global::System.Collections.Generic.SortedDictionary<int, int> __P30;
        global::System.Collections.Generic.SortedList<int, int> __P31;
        global::System.Collections.Concurrent.ConcurrentDictionary<int, int> __P32;
        global::System.Collections.ObjectModel.ReadOnlyCollection<int> __P33;
        global::System.Collections.ObjectModel.ReadOnlyObservableCollection<int> __P34;
        global::System.Collections.Concurrent.BlockingCollection<int> __P35;
        global::System.Collections.Generic.IEnumerable<int> __P49;
        global::System.Collections.Generic.ICollection<int> __P50;
        global::System.Collections.Generic.IReadOnlyCollection<int> __P51;
        global::System.Collections.Generic.IList<int> __P52;
        global::System.Collections.Generic.IReadOnlyList<int> __P53;
        global::System.Collections.Generic.IDictionary<int, int> __P54;
        global::System.Collections.Generic.IReadOnlyDictionary<int, int> __P55;
        global::System.Linq.ILookup<int, int> __P56;
        global::System.Linq.IGrouping<int, int> __P57;
        global::System.Collections.Generic.ISet<int> __P58;
        global::System.Tuple<int, string, int> __T3;
        (int, string, int) __VT3;
        global::MemoryPack.Tests.Models.MyStruct? __N1;
        global::System.Collections.Generic.KeyValuePair<string, string> __N2;
        global::MemoryPack.Tests.Models.IUnionType __U1;

        
        if (count == 49)
        {
            if (value == null)
            {
                __P1 = reader.ReadValue<global::System.Numerics.BigInteger>();
                __P2 = reader.ReadValue<global::System.Version>();
                __P3 = reader.ReadValue<global::System.Uri>();
                __P4 = reader.ReadValue<global::System.TimeZoneInfo>();
                __P5 = reader.ReadValue<global::System.Collections.BitArray>();
                __P6 = reader.ReadValue<global::System.Text.StringBuilder>();
                __P7 = reader.ReadValue<global::System.Type>();
                __P8 = reader.ReadValue<int[,]>();
                __P9 = reader.ReadValue<int[,,]>();
                __P10 = reader.ReadValue<int[,,,]>();
                reader.ReadUnmanaged(out __P11);
                __P12 = reader.ReadValue<global::System.Lazy<int>>();
                reader.DangerousReadUnmanaged(out __P13);
                __P14 = reader.ReadValue<global::System.ArraySegment<int>>();
                __P15 = reader.ReadValue<global::System.Memory<int>>();
                __P16 = reader.ReadValue<global::System.ReadOnlyMemory<int>>();
                __P17 = reader.ReadValue<global::System.Buffers.ReadOnlySequence<int>>();
                __P18 = reader.ReadValue<global::System.Collections.Generic.List<int>>();
                __P19 = reader.ReadValue<global::System.Collections.Generic.Stack<int>>();
                __P20 = reader.ReadValue<global::System.Collections.Generic.Queue<int>>();
                __P21 = reader.ReadValue<global::System.Collections.Generic.LinkedList<int>>();
                __P22 = reader.ReadValue<global::System.Collections.Generic.HashSet<int>>();
                __P24 = reader.ReadValue<global::System.Collections.ObjectModel.ObservableCollection<int>>();
                __P25 = reader.ReadValue<global::System.Collections.ObjectModel.Collection<int>>();
                __P26 = reader.ReadValue<global::System.Collections.Concurrent.ConcurrentQueue<int>>();
                __P27 = reader.ReadValue<global::System.Collections.Concurrent.ConcurrentStack<int>>();
                __P28 = reader.ReadValue<global::System.Collections.Concurrent.ConcurrentBag<int>>();
                __P29 = reader.ReadValue<global::System.Collections.Generic.Dictionary<int, int>>();
                __P30 = reader.ReadValue<global::System.Collections.Generic.SortedDictionary<int, int>>();
                __P31 = reader.ReadValue<global::System.Collections.Generic.SortedList<int, int>>();
                __P32 = reader.ReadValue<global::System.Collections.Concurrent.ConcurrentDictionary<int, int>>();
                __P33 = reader.ReadValue<global::System.Collections.ObjectModel.ReadOnlyCollection<int>>();
                __P34 = reader.ReadValue<global::System.Collections.ObjectModel.ReadOnlyObservableCollection<int>>();
                __P35 = reader.ReadValue<global::System.Collections.Concurrent.BlockingCollection<int>>();
                __P49 = reader.ReadValue<global::System.Collections.Generic.IEnumerable<int>>();
                __P50 = reader.ReadValue<global::System.Collections.Generic.ICollection<int>>();
                __P51 = reader.ReadValue<global::System.Collections.Generic.IReadOnlyCollection<int>>();
                __P52 = reader.ReadValue<global::System.Collections.Generic.IList<int>>();
                __P53 = reader.ReadValue<global::System.Collections.Generic.IReadOnlyList<int>>();
                __P54 = reader.ReadValue<global::System.Collections.Generic.IDictionary<int, int>>();
                __P55 = reader.ReadValue<global::System.Collections.Generic.IReadOnlyDictionary<int, int>>();
                __P56 = reader.ReadValue<global::System.Linq.ILookup<int, int>>();
                __P57 = reader.ReadValue<global::System.Linq.IGrouping<int, int>>();
                __P58 = reader.ReadValue<global::System.Collections.Generic.ISet<int>>();
                __T3 = reader.ReadValue<global::System.Tuple<int, string, int>>();
                __VT3 = reader.ReadValue<(int, string, int)>();
                __N1 = reader.ReadValue<global::MemoryPack.Tests.Models.MyStruct?>();
                __N2 = reader.ReadValue<global::System.Collections.Generic.KeyValuePair<string, string>>();
                __U1 = reader.ReadValue<global::MemoryPack.Tests.Models.IUnionType>();


                goto NEW;
            }
            else
            {
                __P1 = value.@P1;
                __P2 = value.@P2;
                __P3 = value.@P3;
                __P4 = value.@P4;
                __P5 = value.@P5;
                __P6 = value.@P6;
                __P7 = value.@P7;
                __P8 = value.@P8;
                __P9 = value.@P9;
                __P10 = value.@P10;
                __P11 = value.@P11;
                __P12 = value.@P12;
                __P13 = value.@P13;
                __P14 = value.@P14;
                __P15 = value.@P15;
                __P16 = value.@P16;
                __P17 = value.@P17;
                __P18 = value.@P18;
                __P19 = value.@P19;
                __P20 = value.@P20;
                __P21 = value.@P21;
                __P22 = value.@P22;
                __P24 = value.@P24;
                __P25 = value.@P25;
                __P26 = value.@P26;
                __P27 = value.@P27;
                __P28 = value.@P28;
                __P29 = value.@P29;
                __P30 = value.@P30;
                __P31 = value.@P31;
                __P32 = value.@P32;
                __P33 = value.@P33;
                __P34 = value.@P34;
                __P35 = value.@P35;
                __P49 = value.@P49;
                __P50 = value.@P50;
                __P51 = value.@P51;
                __P52 = value.@P52;
                __P53 = value.@P53;
                __P54 = value.@P54;
                __P55 = value.@P55;
                __P56 = value.@P56;
                __P57 = value.@P57;
                __P58 = value.@P58;
                __T3 = value.@T3;
                __VT3 = value.@VT3;
                __N1 = value.@N1;
                __N2 = value.@N2;
                __U1 = value.@U1;

                reader.ReadValue(ref __P1);
                reader.ReadValue(ref __P2);
                reader.ReadValue(ref __P3);
                reader.ReadValue(ref __P4);
                reader.ReadValue(ref __P5);
                reader.ReadValue(ref __P6);
                reader.ReadValue(ref __P7);
                reader.ReadValue(ref __P8);
                reader.ReadValue(ref __P9);
                reader.ReadValue(ref __P10);
                reader.ReadUnmanaged(out __P11);
                reader.ReadValue(ref __P12);
                reader.DangerousReadUnmanaged(out __P13);
                reader.ReadValue(ref __P14);
                reader.ReadValue(ref __P15);
                reader.ReadValue(ref __P16);
                reader.ReadValue(ref __P17);
                reader.ReadValue(ref __P18);
                reader.ReadValue(ref __P19);
                reader.ReadValue(ref __P20);
                reader.ReadValue(ref __P21);
                reader.ReadValue(ref __P22);
                reader.ReadValue(ref __P24);
                reader.ReadValue(ref __P25);
                reader.ReadValue(ref __P26);
                reader.ReadValue(ref __P27);
                reader.ReadValue(ref __P28);
                reader.ReadValue(ref __P29);
                reader.ReadValue(ref __P30);
                reader.ReadValue(ref __P31);
                reader.ReadValue(ref __P32);
                reader.ReadValue(ref __P33);
                reader.ReadValue(ref __P34);
                reader.ReadValue(ref __P35);
                reader.ReadValue(ref __P49);
                reader.ReadValue(ref __P50);
                reader.ReadValue(ref __P51);
                reader.ReadValue(ref __P52);
                reader.ReadValue(ref __P53);
                reader.ReadValue(ref __P54);
                reader.ReadValue(ref __P55);
                reader.ReadValue(ref __P56);
                reader.ReadValue(ref __P57);
                reader.ReadValue(ref __P58);
                reader.ReadValue(ref __T3);
                reader.ReadValue(ref __VT3);
                reader.ReadValue(ref __N1);
                reader.ReadValue(ref __N2);
                reader.ReadValue(ref __U1);

                goto SET;
            }

        }
        else if (count > 49)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(HogeHoge), 49, count);
            goto READ_END;
        }
        else
        {
            if (value == null)
            {
               __P1 = default!;
               __P2 = default!;
               __P3 = default!;
               __P4 = default!;
               __P5 = default!;
               __P6 = default!;
               __P7 = default!;
               __P8 = default!;
               __P9 = default!;
               __P10 = default!;
               __P11 = default!;
               __P12 = default!;
               __P13 = default!;
               __P14 = default!;
               __P15 = default!;
               __P16 = default!;
               __P17 = default!;
               __P18 = default!;
               __P19 = default!;
               __P20 = default!;
               __P21 = default!;
               __P22 = default!;
               __P24 = default!;
               __P25 = default!;
               __P26 = default!;
               __P27 = default!;
               __P28 = default!;
               __P29 = default!;
               __P30 = default!;
               __P31 = default!;
               __P32 = default!;
               __P33 = default!;
               __P34 = default!;
               __P35 = default!;
               __P49 = default!;
               __P50 = default!;
               __P51 = default!;
               __P52 = default!;
               __P53 = default!;
               __P54 = default!;
               __P55 = default!;
               __P56 = default!;
               __P57 = default!;
               __P58 = default!;
               __T3 = default!;
               __VT3 = default!;
               __N1 = default!;
               __N2 = default!;
               __U1 = default!;
            }
            else
            {
               __P1 = value.@P1;
               __P2 = value.@P2;
               __P3 = value.@P3;
               __P4 = value.@P4;
               __P5 = value.@P5;
               __P6 = value.@P6;
               __P7 = value.@P7;
               __P8 = value.@P8;
               __P9 = value.@P9;
               __P10 = value.@P10;
               __P11 = value.@P11;
               __P12 = value.@P12;
               __P13 = value.@P13;
               __P14 = value.@P14;
               __P15 = value.@P15;
               __P16 = value.@P16;
               __P17 = value.@P17;
               __P18 = value.@P18;
               __P19 = value.@P19;
               __P20 = value.@P20;
               __P21 = value.@P21;
               __P22 = value.@P22;
               __P24 = value.@P24;
               __P25 = value.@P25;
               __P26 = value.@P26;
               __P27 = value.@P27;
               __P28 = value.@P28;
               __P29 = value.@P29;
               __P30 = value.@P30;
               __P31 = value.@P31;
               __P32 = value.@P32;
               __P33 = value.@P33;
               __P34 = value.@P34;
               __P35 = value.@P35;
               __P49 = value.@P49;
               __P50 = value.@P50;
               __P51 = value.@P51;
               __P52 = value.@P52;
               __P53 = value.@P53;
               __P54 = value.@P54;
               __P55 = value.@P55;
               __P56 = value.@P56;
               __P57 = value.@P57;
               __P58 = value.@P58;
               __T3 = value.@T3;
               __VT3 = value.@VT3;
               __N1 = value.@N1;
               __N2 = value.@N2;
               __U1 = value.@U1;
            }


            if (count == 0) goto SKIP_READ;
            reader.ReadValue(ref __P1); if (count == 1) goto SKIP_READ;
            reader.ReadValue(ref __P2); if (count == 2) goto SKIP_READ;
            reader.ReadValue(ref __P3); if (count == 3) goto SKIP_READ;
            reader.ReadValue(ref __P4); if (count == 4) goto SKIP_READ;
            reader.ReadValue(ref __P5); if (count == 5) goto SKIP_READ;
            reader.ReadValue(ref __P6); if (count == 6) goto SKIP_READ;
            reader.ReadValue(ref __P7); if (count == 7) goto SKIP_READ;
            reader.ReadValue(ref __P8); if (count == 8) goto SKIP_READ;
            reader.ReadValue(ref __P9); if (count == 9) goto SKIP_READ;
            reader.ReadValue(ref __P10); if (count == 10) goto SKIP_READ;
            reader.ReadUnmanaged(out __P11); if (count == 11) goto SKIP_READ;
            reader.ReadValue(ref __P12); if (count == 12) goto SKIP_READ;
            reader.DangerousReadUnmanaged(out __P13); if (count == 13) goto SKIP_READ;
            reader.ReadValue(ref __P14); if (count == 14) goto SKIP_READ;
            reader.ReadValue(ref __P15); if (count == 15) goto SKIP_READ;
            reader.ReadValue(ref __P16); if (count == 16) goto SKIP_READ;
            reader.ReadValue(ref __P17); if (count == 17) goto SKIP_READ;
            reader.ReadValue(ref __P18); if (count == 18) goto SKIP_READ;
            reader.ReadValue(ref __P19); if (count == 19) goto SKIP_READ;
            reader.ReadValue(ref __P20); if (count == 20) goto SKIP_READ;
            reader.ReadValue(ref __P21); if (count == 21) goto SKIP_READ;
            reader.ReadValue(ref __P22); if (count == 22) goto SKIP_READ;
            reader.ReadValue(ref __P24); if (count == 23) goto SKIP_READ;
            reader.ReadValue(ref __P25); if (count == 24) goto SKIP_READ;
            reader.ReadValue(ref __P26); if (count == 25) goto SKIP_READ;
            reader.ReadValue(ref __P27); if (count == 26) goto SKIP_READ;
            reader.ReadValue(ref __P28); if (count == 27) goto SKIP_READ;
            reader.ReadValue(ref __P29); if (count == 28) goto SKIP_READ;
            reader.ReadValue(ref __P30); if (count == 29) goto SKIP_READ;
            reader.ReadValue(ref __P31); if (count == 30) goto SKIP_READ;
            reader.ReadValue(ref __P32); if (count == 31) goto SKIP_READ;
            reader.ReadValue(ref __P33); if (count == 32) goto SKIP_READ;
            reader.ReadValue(ref __P34); if (count == 33) goto SKIP_READ;
            reader.ReadValue(ref __P35); if (count == 34) goto SKIP_READ;
            reader.ReadValue(ref __P49); if (count == 35) goto SKIP_READ;
            reader.ReadValue(ref __P50); if (count == 36) goto SKIP_READ;
            reader.ReadValue(ref __P51); if (count == 37) goto SKIP_READ;
            reader.ReadValue(ref __P52); if (count == 38) goto SKIP_READ;
            reader.ReadValue(ref __P53); if (count == 39) goto SKIP_READ;
            reader.ReadValue(ref __P54); if (count == 40) goto SKIP_READ;
            reader.ReadValue(ref __P55); if (count == 41) goto SKIP_READ;
            reader.ReadValue(ref __P56); if (count == 42) goto SKIP_READ;
            reader.ReadValue(ref __P57); if (count == 43) goto SKIP_READ;
            reader.ReadValue(ref __P58); if (count == 44) goto SKIP_READ;
            reader.ReadValue(ref __T3); if (count == 45) goto SKIP_READ;
            reader.ReadValue(ref __VT3); if (count == 46) goto SKIP_READ;
            reader.ReadValue(ref __N1); if (count == 47) goto SKIP_READ;
            reader.ReadValue(ref __N2); if (count == 48) goto SKIP_READ;
            reader.ReadValue(ref __U1); if (count == 49) goto SKIP_READ;

    SKIP_READ:
            if (value == null)
            {
                goto NEW;
            }
            else
            {
                goto SET;
            }

        }

    SET:
        
        value.@P1 = __P1;
        value.@P2 = __P2;
        value.@P3 = __P3;
        value.@P4 = __P4;
        value.@P5 = __P5;
        value.@P6 = __P6;
        value.@P7 = __P7;
        value.@P8 = __P8;
        value.@P9 = __P9;
        value.@P10 = __P10;
        value.@P11 = __P11;
        value.@P12 = __P12;
        value.@P13 = __P13;
        value.@P14 = __P14;
        value.@P15 = __P15;
        value.@P16 = __P16;
        value.@P17 = __P17;
        value.@P18 = __P18;
        value.@P19 = __P19;
        value.@P20 = __P20;
        value.@P21 = __P21;
        value.@P22 = __P22;
        value.@P24 = __P24;
        value.@P25 = __P25;
        value.@P26 = __P26;
        value.@P27 = __P27;
        value.@P28 = __P28;
        value.@P29 = __P29;
        value.@P30 = __P30;
        value.@P31 = __P31;
        value.@P32 = __P32;
        value.@P33 = __P33;
        value.@P34 = __P34;
        value.@P35 = __P35;
        value.@P49 = __P49;
        value.@P50 = __P50;
        value.@P51 = __P51;
        value.@P52 = __P52;
        value.@P53 = __P53;
        value.@P54 = __P54;
        value.@P55 = __P55;
        value.@P56 = __P56;
        value.@P57 = __P57;
        value.@P58 = __P58;
        value.@T3 = __T3;
        value.@VT3 = __VT3;
        value.@N1 = __N1;
        value.@N2 = __N2;
        value.@U1 = __U1;
        goto READ_END;

    NEW:
        value = new HogeHoge()
        {
            @P1 = __P1,
            @P2 = __P2,
            @P3 = __P3,
            @P4 = __P4,
            @P5 = __P5,
            @P6 = __P6,
            @P7 = __P7,
            @P8 = __P8,
            @P9 = __P9,
            @P10 = __P10,
            @P11 = __P11,
            @P12 = __P12,
            @P13 = __P13,
            @P14 = __P14,
            @P15 = __P15,
            @P16 = __P16,
            @P17 = __P17,
            @P18 = __P18,
            @P19 = __P19,
            @P20 = __P20,
            @P21 = __P21,
            @P22 = __P22,
            @P24 = __P24,
            @P25 = __P25,
            @P26 = __P26,
            @P27 = __P27,
            @P28 = __P28,
            @P29 = __P29,
            @P30 = __P30,
            @P31 = __P31,
            @P32 = __P32,
            @P33 = __P33,
            @P34 = __P34,
            @P35 = __P35,
            @P49 = __P49,
            @P50 = __P50,
            @P51 = __P51,
            @P52 = __P52,
            @P53 = __P53,
            @P54 = __P54,
            @P55 = __P55,
            @P56 = __P56,
            @P57 = __P57,
            @P58 = __P58,
            @T3 = __T3,
            @VT3 = __VT3,
            @N1 = __N1,
            @N2 = __N2,
            @U1 = __U1
        };

    READ_END:

    END:

        return;
    }
}
partial class HogeHoge
{
    [global::MemoryPack.Internal.Preserve]
    sealed class HogeHogeFormatter : MemoryPackFormatter<HogeHoge>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref HogeHoge value)
        {
            HogeHoge.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref HogeHoge value)
        {
            HogeHoge.Deserialize(ref reader, ref value);
        }
    }
}
}
