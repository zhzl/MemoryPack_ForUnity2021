
// <auto-generated/>
#nullable enable
#pragma warning disable CS0108 // hides inherited member
#pragma warning disable CS0162 // Unreachable code
#pragma warning disable CS0164 // This label has not been referenced
#pragma warning disable CS0219 // Variable assigned but never used
#pragma warning disable CS0618 // Type or member is obsolete
#pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
#pragma warning disable CS8601 // Possible null reference assignment
#pragma warning disable CS8602
#pragma warning disable CS8604 // Possible null reference argument for parameter
#pragma warning disable CS8619
#pragma warning disable CS8620
#pragma warning disable CS8631 // The type cannot be used as type parameter in the generic type or method
#pragma warning disable CS8765 // Nullability of type of parameter
#pragma warning disable CS9074 // The 'scoped' modifier of parameter doesn't match overridden or implemented member
#pragma warning disable CA1050 // Declare types in namespaces.

using System;
using MemoryPack;

namespace MemoryPack.Tests.Models {

/// <remarks>
/// MemoryPack GenerateType: Object<br/>
/// <code>
/// <b>string</b> V<br/>
/// </code>
/// </remarks>
partial struct MyStruct : IMemoryPackable<MyStruct>
{

    static partial void StaticConstructor();

    static MyStruct()
    {
        RegisterFormatter();
        StaticConstructor();
    }

    [global::MemoryPack.Internal.Preserve]
    public static void RegisterFormatter()
    {
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<MyStruct>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new MyStructFormatter());
        }
        if (!global::MemoryPack.MemoryPackFormatterProvider.IsRegistered<MyStruct[]>())
        {
            global::MemoryPack.MemoryPackFormatterProvider.Register(new global::MemoryPack.Formatters.ArrayFormatter<MyStruct>());
        }

    }

    [global::MemoryPack.Internal.Preserve]
    public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref MyStruct value) where TBufferWriter : class, System.Buffers.IBufferWriter<byte>
    {



        writer.WriteObjectHeader(1);
        writer.WriteString(value.@V);

    END:

        return;
    }

    [global::MemoryPack.Internal.Preserve]
    public static void Deserialize(ref MemoryPackReader reader, ref MyStruct value)
    {

        if (!reader.TryReadObjectHeader(out var count))
        {
            value = default!;
            goto END;
        }



        string __V;

        
        if (count == 1)
        {
            
            {
                __V = reader.ReadString();


                goto NEW;
            }
#if false
            {
                __V = value.@V;

                __V = reader.ReadString();

                goto SET;
            }
#endif
        }
        else if (count > 1)
        {
            MemoryPackSerializationException.ThrowInvalidPropertyCount(typeof(MyStruct), 1, count);
            goto READ_END;
        }
        else
        {
            
            {
               __V = default!;
            }
#if false
            {
               __V = value.@V;
            }
#endif

            if (count == 0) goto SKIP_READ;
            __V = reader.ReadString(); if (count == 1) goto SKIP_READ;

    SKIP_READ:
            
            {
                goto NEW;
            }
#if false
            {
                goto SET;
            }
#endif
        }

    SET:
        
        value.@V = __V;
        goto READ_END;

    NEW:
        value = new MyStruct()
        {
            @V = __V
        };

    READ_END:

    END:

        return;
    }
}
partial struct MyStruct
{
    [global::MemoryPack.Internal.Preserve]
    sealed class MyStructFormatter : MemoryPackFormatter<MyStruct>
    {
        [global::MemoryPack.Internal.Preserve]
        public override void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer,  ref MyStruct value)
        {
            MyStruct.Serialize(ref writer, ref value);
        }

        [global::MemoryPack.Internal.Preserve]
        public override void Deserialize(ref MemoryPackReader reader, ref MyStruct value)
        {
            MyStruct.Deserialize(ref reader, ref value);
        }
    }
}
}
